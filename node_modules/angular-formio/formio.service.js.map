{"version":3,"file":"formio.service.js","sourceRoot":"","sources":["../src/formio.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;AAI7C,IAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACjC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;;AAGxB;AAAA;IAEE,uBAAmB,GAAW,EAAS,OAAgB;QAApC,QAAG,GAAH,GAAG,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAS;QACrD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAClD;IACD,sCAAc,GAAd,UAAe,EAAO;QACpB,IAAI,MAAW,CAAC;QAChB,IAAI,MAAM,GAAY,KAAK,CAAC;QAC5B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC/C,IAAI,CAAC;gBACH,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACZ,MAAM,GAAG,IAAI,CAAC;oBACd,EAAE,EAAE;yBACD,IAAI,CAAC,UAAC,OAAY;wBACjB,MAAM,GAAG,OAAO,CAAC;wBACjB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACtB,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACrB,CAAC;yBACD,KAAK,CAAC,UAAC,GAAQ,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAnB,CAAmB,CAAC,CAAC;iBAC7C;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBAClB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACtB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACF;YAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;gBACb,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACrB;SACF,CAAC,CAAC;KACJ;IACD,gCAAQ,GAAR,UAAS,IAAgB;QAAzB,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAA1B,CAA0B,CAAC,CAAC;KAC9D;IACD,gCAAQ,GAAR,UAAS,OAAa;QAAtB,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAA7B,CAA6B,CAAC,CAAC;KACjE;IACD,sCAAc,GAAd;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,cAAc,EAAE,EAA5B,CAA4B,CAAC,CAAC;KAChE;IACD,sCAAc,GAAd,UAAe,UAAc;QAA7B,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,EAAtC,CAAsC,CAAC,CAAC;KAC1E;IACD,uCAAe,GAAf;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,eAAe,EAAE,EAA7B,CAA6B,CAAC,CAAC;KACjE;wBAlDH;IAmDC,CAAA;;AA3CD,yBA2CC","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { FormioForm } from './formio.common';\n/* tslint:disable */\nlet Formio = require('formiojs');\nFormio = Formio.default;\n/* tslint:enable */\n\nexport class FormioService {\n  public formio: any;\n  constructor(public url: string, public options?: object) {\n    this.formio = new Formio(this.url, this.options);\n  }\n  requestWrapper(fn: any) {\n    let record: any;\n    let called: boolean = false;\n    return Observable.create((observer: Observer<any>) => {\n      try {\n        if (!called) {\n          called = true;\n          fn()\n            .then((_record: any) => {\n              record = _record;\n              observer.next(record);\n              observer.complete();\n            })\n            .catch((err: any) => observer.error(err));\n        } else if (record) {\n          observer.next(record);\n          observer.complete();\n        }\n      } catch (err) {\n        observer.error(err);\n      }\n    });\n  }\n  saveForm(form: FormioForm): Observable<FormioForm> {\n    return this.requestWrapper(() => this.formio.saveForm(form));\n  }\n  loadForm(options?: any): Observable<FormioForm> {\n    return this.requestWrapper(() => this.formio.loadForm(options));\n  }\n  loadSubmission(): Observable<{}> {\n    return this.requestWrapper(() => this.formio.loadSubmission());\n  }\n  saveSubmission(submission: {}): Observable<{}> {\n    return this.requestWrapper(() => this.formio.saveSubmission(submission));\n  }\n  loadSubmissions(): Observable<{}> {\n    return this.requestWrapper(() => this.formio.loadSubmissions());\n  }\n}\n"]}