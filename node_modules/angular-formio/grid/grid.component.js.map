{"version":3,"file":"grid.component.js","sourceRoot":"","sources":["../../src/grid/grid.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnChanges\n} from '@angular/core';\nimport { FormioLoader } from '../formio.loader';\nimport { FormioAlerts } from '../formio.alerts';\n\n/* tslint:disable */\nlet Formio = require('formiojs');\nFormio = Formio.default;\nlet FormioUtils = require('formiojs/utils');\nlet Components = require('formiojs/lib/components');\nlet _get = require('lodash/get');\nlet _each = require('lodash/each');\nlet _assign = require('lodash/assign');\n/* tslint:enable */\n\n@Component({\n  selector: 'formio-grid',\n  styles: [\n    ':host .formio-grid { position: relative; width: 100%; }',\n    ':host >>> ul.pagination { margin: 5px 0; }',\n    '.item-counter { margin: 5px 0; }',\n    '.page-num { font-size: 1.4em; }',\n    '.grid-refresh { height: 400px; width: 100%; }'\n  ],\n  template:\n    '<div class=\"formio-grid\">' +\n    '  <formio-alerts [alerts]=\"alerts\"></formio-alerts>' +\n    '  <table class=\"table table-condensed table-bordered table-striped table-hover\">' +\n    '    <thead>' +\n    '      <tr>' +\n    '        <th *ngFor=\"let col of columns\"><a (click)=\"sortColumn(col)\">{{ col.label }} <span [ngClass]=\"{\\'glyphicon-triangle-top\\': (col.sort === \\'asc\\'), \\'glyphicon-triangle-bottom\\': (col.sort === \\'desc\\')}\" class=\"glyphicon\" *ngIf=\"col.sort\"></span></a></th>' +\n    '      </tr>' +\n    '    </thead>' +\n    '    <formio-loader></formio-loader>' +\n    '    <tbody *ngIf=\"!isLoading\">' +\n    '      <tr *ngFor=\"let row of rows\" (click)=\"onClick(row)\">' +\n    '        <td *ngFor=\"let col of columns\" [innerHTML]=\"data(row, col)\"></td>' +\n    '      </tr>' +\n    '    </tbody>' +\n    '    <tfoot>' +\n    '      <tr>' +\n    '        <td [colSpan]=\"columns.length\">' +\n    '          <pagination [totalItems]=\"total\" [(ngModel)]=\"skip\" (pageChanged)=\"pageChanged($event)\" class=\"pagination-sm\"></pagination>' +\n    '          <span class=\"pull-right item-counter\"><span class=\"page-num\">{{ firstItem }} - {{ lastItem }}</span> / {{ total }} total</span>' +\n    '        </td>' +\n    '      </tr>' +\n    '    </tfoot>' +\n    '  </table>' +\n    '</div>'\n})\nexport class FormioGridComponent implements OnInit, OnChanges {\n  @Input() src?: string;\n  @Input() onForm?: Promise<any>;\n  @Input() query: any;\n  @Input() refresh?: EventEmitter<object>;\n  @Output() select: EventEmitter<object>;\n  @Output() error: EventEmitter<any>;\n\n  public columns: any[] = [];\n  public rows: any[] = [];\n  public formio: any;\n  public form: any;\n  public total: number = 0;\n  public page: number = 0;\n  public firstItem: number = 0;\n  public lastItem: number = 0;\n  public skip: number = 0;\n  public isLoading: boolean = false;\n  public initialized: boolean = false;\n\n  constructor(public loader: FormioLoader, public alerts: FormioAlerts) {\n    this.select = new EventEmitter();\n    this.error = new EventEmitter();\n    this.loader.loading = true;\n  }\n\n  loadGrid(src?: string) {\n    // If no source is provided, then skip.\n    if (!src) {\n      return;\n    }\n    // Do not double load.\n    if (this.formio && src === this.src) {\n      return;\n    }\n\n    this.formio = new Formio(this.src, { formOnly: true });\n    this.formio.loadForm().then((form: any) => {\n      this.form = form;\n      this.setupColumns();\n    });\n    this.setPage(0);\n  }\n\n  ngOnInit() {\n    this.alerts.setAlerts([]);\n    this.query = this.query || {};\n\n    if (this.refresh) {\n      this.refresh.subscribe((query: object) => this.refreshGrid(query));\n    }\n\n    // Load the grid.\n    this.loadGrid(this.src);\n    this.initialized = true;\n  }\n\n  ngOnChanges(changes: any) {\n    if (this.initialized && changes.src && changes.src.currentValue) {\n      this.loadGrid(changes.src.currentValue);\n    }\n  }\n\n  setupColumns() {\n    FormioUtils.eachComponent(this.form.components, (component: any) => {\n      if (component.input && component.tableView) {\n        this.columns.push({\n          label: component.label,\n          key: 'data.' + component.key,\n          sort: '',\n          component: Components.create(component, null, null, true)\n        });\n      }\n    });\n  }\n\n  set loading(_loading: boolean) {\n    this.loader.loading = this.isLoading = _loading;\n  }\n\n  onError(error: any) {\n    this.error.emit(error);\n    this.alerts.setAlert({\n      type: 'danger',\n      message: error\n    });\n  }\n\n  refreshGrid(query?: any) {\n    this.alerts.setAlerts([]);\n    query = query || {};\n    query = _assign(query, this.query);\n    if (!query.hasOwnProperty('limit')) {\n      query.limit = 10;\n    }\n    if (!query.hasOwnProperty('skip')) {\n      query.skip = 0;\n    }\n    this.loading = true;\n    this.formio\n      .loadSubmissions({ params: query })\n      .then(\n        (submissions: any) => {\n          this.firstItem = this.query.skip + 1;\n          this.lastItem = this.firstItem + submissions.length - 1;\n          this.total = submissions.serverCount;\n          this.skip = Math.floor(submissions.skip / query.limit) + 1;\n          this.rows = [];\n          _each(submissions, (submission: any) => {\n            this.rows.push(submission);\n          });\n          this.loading = false;\n        },\n        (err: any) => this.onError(err)\n      )\n      .catch((err: any) => this.onError(err));\n  }\n\n  setPage(num: number = -1) {\n    if (this.isLoading) {\n      return;\n    }\n    this.page = num !== -1 ? num : this.page;\n    if (!this.query.hasOwnProperty('limit')) {\n      this.query.limit = 10;\n    }\n    if (!this.query.hasOwnProperty('skip')) {\n      this.query.skip = 0;\n    }\n    this.query.skip = this.page * this.query.limit;\n    this.refreshGrid();\n  }\n\n  sortColumn(column: any) {\n    // Reset all other column sorts.\n    _each(this.columns, (col: any) => {\n      if (col.key !== column.key) {\n        col.sort = '';\n      }\n    });\n    switch (column.sort) {\n      case 'asc':\n        column.sort = 'desc';\n        this.query.sort = '-' + column.key;\n        break;\n      case 'desc':\n        column.sort = '';\n        delete this.query.sort;\n        break;\n      case '':\n        column.sort = 'asc';\n        this.query.sort = column.key;\n        break;\n    }\n    this.refreshGrid();\n  }\n\n  pageChanged(page: any) {\n    this.setPage(page.page - 1);\n  }\n\n  onClick(row: any) {\n    this.select.emit(row);\n  }\n\n  data(row: any, col: any) {\n    const cellValue: any = _get(row, col.key);\n    if (typeof col.component.getView === 'function') {\n      return col.component.getView(cellValue);\n    }\n    return col.component.asString(cellValue);\n  }\n}\n"]}