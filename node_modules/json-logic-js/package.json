{
  "_args": [
    [
      {
        "raw": "json-logic-js@^1.2.2",
        "scope": null,
        "escapedName": "json-logic-js",
        "name": "json-logic-js",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "C:\\aaagit\\CruiseBuilder\\node_modules\\formiojs"
    ]
  ],
  "_from": "json-logic-js@>=1.2.2 <2.0.0",
  "_id": "json-logic-js@1.2.2",
  "_inCache": true,
  "_location": "/json-logic-js",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-logic-js-1.2.2.tgz_1515135130747_0.6604545854497701"
  },
  "_npmUser": {
    "name": "jwadhams",
    "email": "jwadhams1@yahoo.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-logic-js@^1.2.2",
    "scope": null,
    "escapedName": "json-logic-js",
    "name": "json-logic-js",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/formiojs"
  ],
  "_resolved": "https://registry.npmjs.org/json-logic-js/-/json-logic-js-1.2.2.tgz",
  "_shasum": "e5c382aa6df25df485edead339869396c533afe8",
  "_shrinkwrap": null,
  "_spec": "json-logic-js@^1.2.2",
  "_where": "C:\\aaagit\\CruiseBuilder\\node_modules\\formiojs",
  "author": {
    "name": "Jeremy Wadhams",
    "email": "jwadhams@dealerinspire.com",
    "url": "http://jsonlogic.com"
  },
  "bugs": {
    "url": "https://github.com/jwadhams/json-logic-js/issues"
  },
  "dependencies": {},
  "description": "Build complex rules, serialize them as JSON, and execute them in JavaScript",
  "devDependencies": {
    "eslint": "^3.9.1",
    "eslint-config-google": "^0.7.0",
    "gulp": "^3.9.0",
    "qunit": "^0.7.7",
    "request": "^2.65.0"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "e5c382aa6df25df485edead339869396c533afe8",
    "tarball": "https://registry.npmjs.org/json-logic-js/-/json-logic-js-1.2.2.tgz"
  },
  "gitHead": "a15f528919346f2ec7d82bd4fc91c41481546c01",
  "homepage": "https://github.com/jwadhams/json-logic-js#readme",
  "keywords": [
    "json",
    "logic",
    "jsonlogic",
    "rules"
  ],
  "license": "MIT",
  "main": "logic.js",
  "maintainers": [
    {
      "name": "jwadhams",
      "email": "jwadhams1@yahoo.com"
    }
  ],
  "name": "json-logic-js",
  "optionalDependencies": {},
  "readme": "# json-logic-js\n\nThis parser accepts [JsonLogic](http://jsonlogic.com) rules and executes them in JavaScript.\n\nThe JsonLogic format is designed to allow you to share rules (logic) between front-end and back-end code (regardless of language difference), even to store logic along with a record in a database.  JsonLogic is documented extensively at [JsonLogic.com](http://jsonlogic.com), including examples of every [supported operation](http://jsonlogic.com/operations.html) and a place to [try out rules in your browser](http://jsonlogic.com/play.html).\n\nThe same format can also be executed in PHP by the library [json-logic-php](https://github.com/jwadhams/json-logic-php/)\n\n## Installation\n\nTo parse JsonLogic rules in a JavaScript frontend, install this library is via [Bower](http://bower.io/):\n\n```bash\nbower install --save json-logic-js\n```\n\nTo parse JsonLogic rules in a JavaScript backend (like Node.js), install this library via [NPM](https://www.npmjs.com/):\n\n```bash\nnpm install json-logic-js\n```\n\nNote that this project uses a [module loader](http://ricostacruz.com/cheatsheets/umdjs.html) that also makes it suitable for RequireJS projects.\n\nIf that doesn't suit you, and you want to manage updates yourself, the entire library is self-contained in `logic.js` and you can download it straight into your project as you see fit.\n\n```bash\ncurl -O https://raw.githubusercontent.com/jwadhams/json-logic-js/master/logic.js\n```\n\n## Examples\n\n### Simple\n```js\njsonLogic.apply( { \"==\" : [1, 1] } );\n// true\n```\n\nThis is a simple test, equivalent to `1 == 1`.  A few things about the format:\n\n  1. The operator is always in the \"key\" position. There is only one key per JsonLogic rule.\n  1. The values are typically an array.\n  1. Each value can be a string, number, boolean, array (non-associative), or null\n\n### Compound\nHere we're beginning to nest rules.\n\n```js\njsonLogic.apply(\n  {\"and\" : [\n    { \">\" : [3,1] },\n    { \"<\" : [1,3] }\n  ] }\n);\n// true\n```\n\nIn an infix language (like JavaScript) this could be written as:\n\n```js\n( (3 > 1) && (1 < 3) )\n```\n\n### Data-Driven\n\nObviously these rules aren't very interesting if they can only take static literal data. Typically `jsonLogic` will be called with a rule object and a data object. You can use the `var` operator to get attributes of the data object:\n\n```js\njsonLogic.apply(\n  { \"var\" : [\"a\"] }, // Rule\n  { a : 1, b : 2 }   // Data\n);\n// 1\n```\n\nIf you like, we support [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar) on unary operators to skip the array around values:\n\n```js\njsonLogic.apply(\n  { \"var\" : \"a\" },\n  { a : 1, b : 2 }\n);\n// 1\n```\n\nYou can also use the `var` operator to access an array by numeric index:\n\n```js\njsonLogic.apply(\n  {\"var\" : 1 },\n  [ \"apple\", \"banana\", \"carrot\" ]\n);\n// \"banana\"\n```\n\nHere's a complex rule that mixes literals and data. The pie isn't ready to eat unless it's cooler than 110 degrees, *and* filled with apples.\n\n```js\nvar rules = { \"and\" : [\n  {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n  {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n] };\n\nvar data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } };\n\njsonLogic.apply(rules, data);\n// true\n```\n\n### Always and Never\nSometimes the rule you want to process is \"Always\" or \"Never.\"  If the first parameter passed to `jsonLogic` is a non-object, non-associative-array, it is returned immediately.\n\n```js\n//Always\njsonLogic.apply(true, data_will_be_ignored);\n// true\n\n//Never\njsonLogic.apply(false, i_wasnt_even_supposed_to_be_here);\n// false\n```\n\n## Compatibility\n\nThis library makes use of `Array.map` and `Array.reduce`, so it's not *exactly* Internet Explorer 8 friendly.\n\nIf you want to use JsonLogic *and* support deprecated browsers, you could easily use [BabelJS's polyfill](https://babeljs.io/docs/usage/polyfill/) or directly incorporate the polyfills documented on MDN for [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\n## Customization\n\nIt's not possible to include everyone's excellent ideas without the core library bloating, bringing in a ton of outside dependencies, or occasionally causing use case conflicts (some people need to safely execute untrusted rules, some people need to change outside state).\n\nCheck out the [documentation for adding custom operations](http://jsonlogic.com/add_operation.html) and be sure to stop by the [Wiki page of custom operations](https://github.com/jwadhams/json-logic-js/wiki/Custom-Operations) to see if someone has already solved your problem or to share your solution.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jwadhams/json-logic-js.git"
  },
  "scripts": {
    "test": "gulp test"
  },
  "version": "1.2.2"
}
