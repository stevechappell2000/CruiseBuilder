{
  "_args": [
    [
      {
        "raw": "browser-cookies@^1.2.0",
        "scope": null,
        "escapedName": "browser-cookies",
        "name": "browser-cookies",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\aaagit\\CruiseBuilder\\node_modules\\formiojs"
    ]
  ],
  "_from": "browser-cookies@>=1.2.0 <2.0.0",
  "_id": "browser-cookies@1.2.0",
  "_inCache": true,
  "_location": "/browser-cookies",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/browser-cookies-1.2.0.tgz_1514454245341_0.0430672294460237"
  },
  "_npmUser": {
    "name": "voltace",
    "email": "support@voltace.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browser-cookies@^1.2.0",
    "scope": null,
    "escapedName": "browser-cookies",
    "name": "browser-cookies",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/formiojs"
  ],
  "_resolved": "https://registry.npmjs.org/browser-cookies/-/browser-cookies-1.2.0.tgz",
  "_shasum": "fca3ffb9b6a63aadc4d8c0999c6b57d0fa7d29b5",
  "_shrinkwrap": null,
  "_spec": "browser-cookies@^1.2.0",
  "_where": "C:\\aaagit\\CruiseBuilder\\node_modules\\formiojs",
  "author": {
    "name": "Voltace",
    "email": "support@voltace.com",
    "url": "http://www.voltace.com/"
  },
  "bugs": {
    "url": "https://github.com/voltace/browser-cookies/issues"
  },
  "dependencies": {},
  "description": "Tiny cookies library for the browser",
  "devDependencies": {
    "browserify": "14.5.0",
    "concurrently": "3.5.1",
    "coveralls": "3.0.0",
    "gulp": "git://github.com/gulpjs/gulp.git#4.0",
    "gulp-rename": "1.2.2",
    "gulp-size": "2.1.0",
    "gulp-uglify": "3.0.0",
    "gulp-wrap": "0.13.0",
    "karma": "2.0.0",
    "karma-coverage": "1.1.1",
    "karma-jasmine": "0.1.6",
    "karma-phantomjs-launcher": "1.0.4",
    "karma-spec-reporter": "0.0.32",
    "phantomjs-prebuilt": "2.1.16",
    "watchify": "3.9.0",
    "zuul": "3.11.1",
    "zuul-ngrok": "4.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fca3ffb9b6a63aadc4d8c0999c6b57d0fa7d29b5",
    "tarball": "https://registry.npmjs.org/browser-cookies/-/browser-cookies-1.2.0.tgz"
  },
  "files": [
    "src/browser-cookies.js",
    "src/browser-cookies.d.ts",
    "README.md",
    "LICENCE"
  ],
  "gitHead": "2f451949575ae8f7f13798ecc52d624eeaee026c",
  "homepage": "https://github.com/voltace/browser-cookies#readme",
  "keywords": [
    "cookies",
    "cookie",
    "client"
  ],
  "license": "Unlicence",
  "main": "src/browser-cookies.js",
  "maintainers": [
    {
      "name": "voltace",
      "email": "support@voltace.com"
    }
  ],
  "name": "browser-cookies",
  "optionalDependencies": {},
  "readme": "<img width=\"425\" height=\"200\" src=\"https://raw.githubusercontent.com/voltace/browser-cookies/master/browser-cookies.png\"/>\r\n\r\n# browser-cookies\r\n**Tiny cookies library for the browser**\r\n\r\n[![NPM Version][npm-version-image]][npm-url]\r\n[![NPM Downloads][npm-downloads-image]][npm-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Coveralls Status][coveralls-image]][coveralls-url]\r\n\r\n- [Features](#features)\r\n- [Browser compatibility](#browser-compatibility)\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [API](#api)\r\n- [Options](#options)\r\n- [Examples](#examples)\r\n- [How to use with PHP](#how-to-use-with-php)\r\n\r\n### Features\r\n- Clean and easy to use API\r\n- Small footprint (minified and gzipped ~ 0.5kB)\r\n- No dependencies\r\n- RFC6265 compliant\r\n- Cross browser support\r\n- Supports CommonJS (e.g. Browserify)\r\n\r\n### Browser compatibility\r\nCross browser support is verified on real browsers using automated testing:  \r\n[![Sauce Test Status][saucelabs-image]][saucelabs-url]  \r\nOr [run the unit tests][ref-unittests] right now in your current browser.\r\n\r\n### Installation\r\nUsing NPM  \r\n`npm install browser-cookies`\r\n\r\nUsing Bower  \r\n`bower install browser-cookies`\r\n\r\n### Usage\r\n```javascript\r\nvar cookies = require('browser-cookies');\r\n\r\ncookies.set('firstName', 'Lisa');\r\ncookies.set('firstName', 'Lisa', {expires: 365}); // Expires after 1 year\r\ncookies.set('firstName', 'Lisa', {secure: true, domain: 'www.example.org'});\r\n\r\ncookies.get('firstName'); // Returns cookie value (or null)\r\n\r\ncookies.erase('firstName'); // Removes cookie\r\n```\r\n[More examples](#examples)\r\n\r\n### API\r\nAPI contents:\r\n- method [cookies.set(`name`, `value` &#91;, `options`&#93;)](#cookies-set)\r\n- method [cookies.get(`name`)](#cookies-get)\r\n- method [cookies.erase(`name`, &#91;, `options`&#93;)](#cookies-erase)\r\n- method [cookies.all()](#cookies-all)\r\n- property [cookies.defaults](#cookies-defaults)\r\n\r\n<hr/><a name=\"cookies-set\"></a>\r\n\r\n[cookies.set(`name`, `value` &#91;, `options`&#93;)](#cookies-set)\r\n<br/>\r\nMethod to save a cookie.\r\n\r\n| argument      | type   | description\r\n|---------------|--------|------------\r\n| **`name`**    | string | The name of the cookie to save.\r\n| **`value`**   | string | The value to save, [percent encoding][ref-percent-encoding] will automatically be applied.\r\n| **`options`** | object | May contain any of the properties specified in [options](#options) below. If an option is not specified, the value configured in [cookies.defaults](#cookies-defaults) will be used.\r\n\r\n\r\n<hr/><a name=\"cookies-get\"></a>\r\n\r\n[cookies.get(`name`)](#cookies-get)\r\n<br/>\r\nMethod that returns a cookie value, or **null** if the cookie is not found. [Percent encoded][ref-percent-encoding] values will automatically be decoded.\r\n\r\n| argument      | type   | description\r\n|---------------|--------|------------\r\n| **`name`**    | string | The name of the cookie to retrieve.\r\n\r\n<hr/><a name=\"cookies-erase\"></a>\r\n\r\n[cookies.erase(`name` &#91;, `options` &#93;)](#cookies-erase)\r\n<br/>\r\nMethod to remove a cookie.\r\n\r\n| argument      | type   | description\r\n|---------------|--------|------------\r\n| **`name`**    | string | The name of the cookie to remove.\r\n| **`options`** | object | May contain the `domain` and `path` properties specified in [options](#options) below. If an option is not specified, the value configured in [cookies.defaults](#cookies-defaults) will be used.\r\n\r\n<hr/><a name=\"cookies-all\"></a>\r\n\r\n[cookies.all()](#cookies-all)\r\n<br/>\r\nMethod to get all cookies.\r\nReturns an object containing all cookie values with the cookie names used as keys. Percent encoded names and values will automatically be decoded.\r\n\r\n<hr/><a name=\"cookies-defaults\"></a>\r\n\r\n[cookies.defaults](#cookies-defaults)\r\n<br/>\r\nThis object may be used to change the default value of each option specified in [options](#options) below.\r\n\r\n\r\n### Options\r\nThe options shown in the table below may be set globally using [cookies.defaults](#cookies-defaults) or passed as function argument to [cookies.set()](#cookies-set) and [cookies.erase()](#cookies-erase). Also check out the [Examples](#examples) further below.\r\n\r\n| Name       | Type                       | Default | Description\r\n|------------|----------------------------|---------|--------\r\n| `expires`  | `Number`, `Date`, `String` | `0`     | Configure when the cookie expires by using one of the following types as value:<ul><li>A `Number` of days until the cookie expires. If set to `0` the cookie will expire at the end of the session.</li><li>A `Date` object such as `new Date(2018, 3, 27)`.</li><li>A `String` in a format recognized by [Date.parse()][ref-date-parse].</li></ul>\r\n| `domain`   | `String`                   | `\"\"`    | The [domain][ref-cookie-domain] from where the cookie is readable.<ul><li>If set to `\"\"` the current domain will be used.</li></ul>\r\n| `path`     | `String`                   | `\"/\"`   | The path from where the cookie is readable.<ul><li>The default value of `\"/\"` allows the cookie to be readable from all paths.</li><li>If set to `\"\"` the cookie will only be readable from the current browser path.</li><li>Note that cookies don't support relative paths such as `\"../../some/path\"` so paths must be absolute like `\"/some/path\"`.</li></ul>\r\n| `secure`   | `Boolean`                  | `false` | If true the cookie will only be transmitted over secure protocols like https.\r\n| `httponly` | `Boolean`                  | `false` | If true the cookie may only be read by the web server.<ul><li> This option may be set to [prevent malicious scripts from accessing cookies][ref-httponly], not all browsers support this feature yet.</li></ul>\r\n| `samesite` | `String`                   | `\"\"`   | The `samesite` argument may be used to [prevent cookies from being sent along with cross-site requests][ref-samesite].<ul><li>If set to `\"\"` the SameSite feature will not be used.</li><li>If set to `\"Strict\"` the cookie will only be sent along with \"same-site\" requests.</li><li>If set to `\"Lax\"` the cookie will be sent with \"same-site\" requests and with \"cross-site\" top-level navigations.</li></ul>This is an experimental feature as only [a few browsers support SameSite][ref-samesite-caniuse] and [the standard][ref-samesite-spec] has not been finalized yet. Don't use this feature in production environments.\r\n\r\n### Examples\r\nCount the number of a visits to a page:  \r\n```javascript\r\nvar cookies = require('browser-cookies');\r\n\r\n// Get cookie value\r\nvar visits = cookies.get('count') || 0;\r\nconsole.log(\"You've been here \" + parseInt(visits) + \" times before!\");\r\n\r\n// Increment the counter and set (or update) the cookie\r\ncookies.set('count', parseInt(visits) + 1, {expires: 365});\r\n```\r\n\r\nJSON may be saved by converting the JSON object into a string:  \r\n```javascript\r\nvar cookies = require('browser-cookies');\r\n\r\n// Store JSON data\r\nvar user = {firstName: 'Sofia', lastName: 'Dueñas'};\r\ncookies.set('user', JSON.stringify(user))\r\n\r\n// Retrieve JSON data\r\nvar userString = cookies.get('user');\r\nalert('Hi ' + JSON.parse(userString).firstName);\r\n```\r\n\r\nThe default cookie options may be changed:\r\n```javascript\r\nvar cookies = require('browser-cookies');\r\n\r\n// Override defaults\r\ncookies.defaults.secure = true;\r\ncookies.defaults.expires = 7;\r\n\r\n// 'secure' option enabled and cookie expires in 7 days\r\ncookies.set('FirstName', 'John')\r\n\r\n// 'secure' option enabled and cookie expires in 30 days\r\ncookies.set('LastName', 'Smith', {expires: 30})\r\n```\r\n\r\nThe `cookies.all` method can be used for more advanced functionality, for example to erase all cookies except one:\r\n```javascript\r\nvar cookies = require('browser-cookies');\r\nvar cookieToKeep = 'FirstName'; // Name of the cookie to keep\r\n\r\n// Get all cookies as an object\r\nvar allCookies = cookies.all();\r\n\r\n// Iterate over all cookie names\r\nfor (var cookieName in allCookies) {\r\n  // Erase the cookie (except if it's the cookie that needs to be kept)\r\n  if(allCookies.hasOwnProperty(cookieName) && cookieName != cookieToKeep) {\r\n\tcookies.erase(cookieName);\r\n  }\r\n}\r\n```\r\n\r\n### How to use with PHP\r\nUse [setrawcookie()][ref-php-setrawcookie] instead of `setcookie()` to prevent PHP from replacing spaces with `+` characters:\r\n```php\r\n// Set cookie\r\nsetrawcookie('fullName', rawurlencode('Lisa Cuddy'));\r\n\r\n// Get cookie\r\n$_COOKIE['fullName'];\r\n```\r\n\r\n### Development\r\nThe design goal is to provide the smallest possible size (when minified and gzipped) for the given API while remaining compliant to RFC6265 and providing cross-browser compatibility and consistency.\r\n\r\nDevelopment setup (requires [node][ref-node-download] and [git][ref-git-setup] to be installed):  \r\n```python\r\ngit clone https://github.com/voltace/browser-cookies.git\r\ncd browser-cookies\r\nnpm install         # Install dev dependencies\r\nnpm run test:local  # Run unit tests locally (takes ~5 seconds)\r\nnpm run build       # Create minified version\r\n```\r\n\r\nFeel free to submit an issue on GitHub for any question, bug or feature requesst you may have.\r\n\r\n### License\r\nPublic Domain ([UNLICENSE][ref-licence])\r\n\r\n[ref-browser-cookies-shim]: https://www.github.com/voltace/browser-cookies-shim\r\n[ref-cookie-domain]: https://stackoverflow.com/questions/1062963/how-do-browser-cookie-domains-work\r\n[ref-date-parse]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\r\n[ref-httponly]: http://blog.codinghorror.com/protecting-your-cookies-httponly/\r\n[ref-ie-cookies]: http://erik.io/blog/2014/03/04/definitive-guide-to-cookie-domains/\r\n[ref-git-setup]: https://help.github.com/articles/set-up-git/\r\n[ref-licence]: http://choosealicense.com/licenses/#unlicense\r\n[ref-node-download]: https://nodejs.org/download/\r\n[ref-percent-encoding]: http://en.wikipedia.org/wiki/Percent-encoding\r\n[ref-php-setrawcookie]: http://php.net/manual/en/function.setrawcookie.php\r\n[ref-unittests]: https://rawgit.com/voltace/browser-cookies/master/test/index.html\r\n[ref-samesite]: http://www.sjoerdlangkemper.nl/2016/04/14/preventing-csrf-with-samesite-cookie-attribute/\r\n[ref-samesite-caniuse]: http://caniuse.com/#feat=same-site-cookie-attribute\r\n[ref-samesite-spec]: https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00\r\n\r\n[npm-url]: https://npmjs.org/package/browser-cookies\r\n[npm-version-image]: https://img.shields.io/npm/v/browser-cookies.svg\r\n[npm-downloads-image]: https://img.shields.io/npm/dm/browser-cookies.svg\r\n\r\n[travis-url]: https://travis-ci.org/voltace/browser-cookies\r\n[travis-image]: https://img.shields.io/travis/voltace/browser-cookies.svg\r\n\r\n[coveralls-url]: https://coveralls.io/r/voltace/browser-cookies\r\n[coveralls-image]: https://img.shields.io/coveralls/voltace/browser-cookies/master.svg\r\n\r\n[saucelabs-url]: https://saucelabs.com/u/browser-cookies\r\n[saucelabs-image]: https://rawgit.com/voltace/browser-cookies/master/browser_compatibility.svg\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/voltace/browser-cookies.git"
  },
  "scripts": {
    "build": "node ./node_modules/gulp/bin/gulp.js build",
    "test": "if [ -z \"$SAUCE_ACCESS_KEY\" ]; then npm run test:local; else npm run test:travis_saucelabs; fi",
    "test:full": "concurrently \"node ./node_modules/gulp/bin/gulp.js build\" \"node ./node_modules/zuul/bin/zuul -- test/*.js\"",
    "test:local": "node ./node_modules/gulp/bin/gulp.js localtest",
    "test:travis_saucelabs": "node ./node_modules/gulp/bin/gulp.js coverage && node ./node_modules/zuul/bin/zuul -- test/*.js"
  },
  "types": "./src/browser-cookies.d.ts",
  "version": "1.2.0"
}
